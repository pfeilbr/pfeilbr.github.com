<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>architecture on Brian Pfeil</title>
        <link>https://brianpfeil.com/categories/architecture/</link>
        <description>Recent content in architecture on Brian Pfeil</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 20 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://brianpfeil.com/categories/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
<title>Serverless Architecture: Key Service Considerations</title>
<link>https://brianpfeil.com/post/serverless-architecture-key-considerations-per-service/</link>
<pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brianpfeil.com/post/serverless-architecture-key-considerations-per-service/</guid>
<description>&lt;p&gt;A serverless architecture is &amp;ldquo;typically&amp;rdquo; composed of many services.  The following
covers the key considerations and configuration options for the &lt;em&gt;most common&lt;/em&gt; AWS services leveraged for serverless architectures.&lt;/p&gt;
&lt;hr&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#relevant-patterns&#34;&gt;Relevant Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambda&#34;&gt;Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sns&#34;&gt;SNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sqs&#34;&gt;SQS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kinesis&#34;&gt;Kinesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eventbridge&#34;&gt;EventBridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dynamodb&#34;&gt;DynamoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-functions&#34;&gt;Step Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#api-gateway&#34;&gt;API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudfront&#34;&gt;CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#route53&#34;&gt;Route53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#global-accelerator&#34;&gt;Global Accelerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#waf&#34;&gt;WAF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;hr&gt;
&lt;h3 id=&#34;relevant-patterns&#34;&gt;Relevant Patterns&lt;/h3&gt;
&lt;p&gt;common cloud native patterns to consider in the context of serverless architectures &lt;u&gt;of scale&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;event sourcing&lt;/li&gt;
&lt;li&gt;circuit breaker - trip circuit to prevent downstream systems overload&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/builders-library/using-load-shedding-to-avoid-overload/&#34;&gt;load shedding&lt;/a&gt; - prevent backlog buildup&lt;/li&gt;
&lt;li&gt;handle poison messages - prevent kinesis and dynamodb streams from progressing&lt;/li&gt;
&lt;li&gt;prevent distributed transactions.  e.g. lambda send job to SQS and stores status in dynamodb.  break it up.  lambda put job status in dynamo -&amp;gt; dynamo stream -&amp;gt; lambda send job to SQS&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lambdahttpsawsamazoncomlambda&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;Lambda&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;synchronous vs asynchronous vs poll based (poll based is sync) - impacts automatic retries, stuck messages due to poison message, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;see &lt;a href=&#34;https://aws.amazon.com/blogs/architecture/understanding-the-different-ways-to-invoke-lambda-functions/&#34;&gt;Understanding the Different Ways to Invoke Lambda Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if lambda is strictly a glue passthrough for API Gateway to call a backend AWS service, look to use &lt;a href=&#34;https://lumigo.io/blog/the-why-when-and-how-of-api-gateway-service-proxies/&#34;&gt;API Gateway Service Proxies&lt;/a&gt; to remove lambda.  simpler/cheaper/etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DLQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lambda destinations (only for async invokes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reserved concurrency - concurrency allocated for a specific function. e.g. i always want fn X to be able to run 10 lambda invokes concurrently&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provisioned concurrency - pre-warmed lambda instances / no cold starts.  good for latency sensitive needs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can optionally use auto scaling to adjust on based on metrics and/or schedule.&lt;/li&gt;
&lt;li&gt;will spill over to on-demand scaling (lambda default)&lt;/li&gt;
&lt;li&gt;Provisioned Concurrency comes out of your regional concurrency limit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;concurrent executions (throttles) - 1000 per account&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeout - 15min&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set code timeouts based on remaining invocation time provided in context&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;burst concurrency - 500 - 3000&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;burst - 500 new instances / min&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;poll based options (kinesis, dynamodb, SQS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on-failure destination (SNS or SQS)&lt;/li&gt;
&lt;li&gt;retry attempts&lt;/li&gt;
&lt;li&gt;max age of record - use to implement load shedding (prioritize newer messages)&lt;/li&gt;
&lt;li&gt;split batch on error&lt;/li&gt;
&lt;li&gt;concurrent batches per shard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;snshttpsawsamazoncomsns&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/sns/&#34;&gt;SNS&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fan out to address scale&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;KMS&lt;/a&gt; to encrypt payloads&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sqshttpsawsamazoncomsqs&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/sqs/&#34;&gt;SQS&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;batch size - batch fails as unit&lt;/li&gt;
&lt;li&gt;visibility timeout - set to 6x lambda timeout&lt;/li&gt;
&lt;li&gt;message retention period&lt;/li&gt;
&lt;li&gt;delivery delay - max 15min&lt;/li&gt;
&lt;li&gt;types - standard vs FIFO
&lt;ul&gt;
&lt;li&gt;standard - at least once delivery.  need to ensure idempotent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;alarm on queue depth&lt;/li&gt;
&lt;li&gt;KMS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kinesishttpsawsamazoncomkinesis&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/kinesis/&#34;&gt;Kinesis&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;partition key - choose wisely as order is guaranteed per shard and pk determines the shard the message lands on&lt;/li&gt;
&lt;li&gt;poison messages (retry until success - can cause backlog)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;KMS&lt;/a&gt; to encrypt payloads&lt;/li&gt;
&lt;li&gt;enhanced fan-out via AWS::Kinesis::StreamConsumer.  each consumer gets 2 MiB per second for every shard you subscribe to.  can subscribe a max of 5 consumers per stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;eventbridgehttpsawsamazoncomeventbridge&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/eventbridge/&#34;&gt;EventBridge&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;put events - 2400 requests per second per region&lt;/li&gt;
&lt;li&gt;invocation &lt;a href=&#34;https://docs.aws.amazon.com/eventbridge/latest/userguide/cloudwatch-limits-eventbridge.html&#34;&gt;quota&lt;/a&gt; -  4500 requests per second per region (invocation is an event matching a rule and being sent on to the ruleâ€™s targets)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dynamodbhttpsawsamazoncomdynamodb&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/dynamodb/&#34;&gt;DynamoDB&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;global tables - for resilient active-active architectures&lt;/li&gt;
&lt;li&gt;throttles&lt;/li&gt;
&lt;li&gt;streams - 24hr data retention.  poison messages (retry until success - can cause backlog)&lt;/li&gt;
&lt;li&gt;partition key - distribute data among nodes to minimize hot partitions&lt;/li&gt;
&lt;li&gt;TTL - can the data be removed automatically&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-functionshttpsawsamazoncomstep-functions&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/step-functions/&#34;&gt;Step Functions&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Standard Workflows vs &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2019/12/introducing-aws-step-functions-express-workflows/&#34;&gt;Express Workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://theburningmonk.com/2017/07/applying-the-saga-pattern-with-aws-lambda-and-step-functions/&#34;&gt;saga&lt;/a&gt; pattern for rollback&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-step-functions-support-for-dynamic-parallelism/&#34;&gt;parallel map&lt;/a&gt; opportunities - run tasks in parallel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;api-gatewayhttpsawsamazoncomapi-gateway&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34;&gt;API Gateway&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;REST API vs &lt;a href=&#34;https://aws.amazon.com/blogs/compute/announcing-http-apis-for-amazon-api-gateway/&#34;&gt;HTTP API&lt;/a&gt; (&lt;a href=&#34;https://aws.amazon.com/api-gateway/pricing/&#34;&gt;cheaper&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html&#34;&gt;caching&lt;/a&gt; - fixed cost based on time / no pay per use&lt;/li&gt;
&lt;li&gt;throttles&lt;/li&gt;
&lt;li&gt;timeout - 29s&lt;/li&gt;
&lt;li&gt;auth - cognito, JWT, IAM (aws sigv4), custom lambda auth&lt;/li&gt;
&lt;li&gt;OpenAPI specs for payload validation&lt;/li&gt;
&lt;li&gt;service proxies - no need for lambda glue in middle&lt;/li&gt;
&lt;li&gt;custom domains&lt;/li&gt;
&lt;li&gt;websockets&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudfronthttpsawsamazoncomcloudfront&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/cloudfront/&#34;&gt;CloudFront&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html&#34;&gt;origin access identity&lt;/a&gt; to force traffic through CloudFront and removes direct access to S3 website domain URL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html&#34;&gt;signed URLs or cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;lambda@edge - headers only requests, rewrite URLs, server-side rendering (SSR), auth, etc.&lt;/li&gt;
&lt;li&gt;cache invalidations&lt;/li&gt;
&lt;li&gt;non GET HTTP methods support.  must explicitly turn on support for PUT, POST, PATCH, etc.&lt;/li&gt;
&lt;li&gt;WAF in front&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;route53httpsawsamazoncomroute53&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/route53/&#34;&gt;Route53&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-geoproximity&#34;&gt;Geoproximity routing&lt;/a&gt; for global solutions serving multiple regions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;global-acceleratorhttpsawsamazoncomglobal-accelerator&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/global-accelerator/&#34;&gt;Global Accelerator&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;uses the AWS global network to optimize the path from your users to your applications, improving the performance of your traffic by as much as 60%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;wafhttpsawsamazoncomwaf&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/waf/&#34;&gt;WAF&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;can put in front of API Gateway or CloudFront&lt;/li&gt;
&lt;li&gt;API Gateway provides overlapping functionality with WAF.  Need to determine the appropriate service to use.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Cloud Native Software Architecture</title>
<link>https://brianpfeil.com/post/cloud-native-software-architecture/</link>
<pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brianpfeil.com/post/cloud-native-software-architecture/</guid>
<description>&lt;p&gt;A personal cheatsheet/reference for cloud native software architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;architecture&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;how the components are assembled and organized. This will be done in a way that meets the quality attributes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#key-questions&#34;&gt;Key Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#organization-considerations&#34;&gt;Organization Considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quality-attributes-ities-and-friends&#34;&gt;Quality Attributes &lt;em&gt;(*ities and friends)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#patterns&#34;&gt;Patterns&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#event-sourcing&#34;&gt;event-sourcing&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#core-design-decisions&#34;&gt;Core Design Decisions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hexagonal&#34;&gt;Hexagonal&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#resources-1&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#topics--concepts--terms&#34;&gt;Topics / Concepts / Terms&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shuffle-sharding&#34;&gt;Shuffle Sharding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#constant-work&#34;&gt;Constant Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#canary&#34;&gt;Canary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources-2&#34;&gt;Resources&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#books-oreillycom&#34;&gt;Books (&lt;em&gt;oreilly.com&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#websites&#34;&gt;Websites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;hr&gt;
&lt;h2 id=&#34;key-questions&#34;&gt;Key Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;who are the users?&lt;/li&gt;
&lt;li&gt;what devices and form factors will be used?&lt;/li&gt;
&lt;li&gt;what is the context of their usage?&lt;/li&gt;
&lt;li&gt;scale and growth?&lt;/li&gt;
&lt;li&gt;who are the main actors in the system (domain objects - e.g. orders, products, etc.)?&lt;/li&gt;
&lt;li&gt;data classifications (PII)?&lt;/li&gt;
&lt;li&gt;data types and sizes (relation records, documents, media files, etc.)?&lt;/li&gt;
&lt;li&gt;what is the time frame for delivery?&lt;/li&gt;
&lt;li&gt;is there an existing product / SaaS / open-source / etc. that provides the solution or a portion / components of it&lt;/li&gt;
&lt;li&gt;capacity estimation &amp;amp; constraints?&lt;/li&gt;
&lt;li&gt;functional requirements?&lt;/li&gt;
&lt;li&gt;Non Functional Requirements - Latency, Consistency, Availability, High Throughput, etc.&lt;/li&gt;
&lt;li&gt;what is explicitly &lt;strong&gt;out of scope&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;organization and teams structure&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;see &lt;a href=&#34;https://medium.com/partha-pratim-sanyal/system-design-doordash-a-prepared-food-delivery-service-bf44093388e2&#34;&gt;System Design: DoorDash â€” a prepared food delivery service&lt;/a&gt; for good reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;organization-considerations&#34;&gt;Organization Considerations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;engineering (application &amp;amp; platform)&lt;/li&gt;
&lt;li&gt;operations (application &amp;amp; platform)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;quality-attributes-ities-and-friends&#34;&gt;Quality Attributes &lt;em&gt;(*ities and friends)&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;reliability - ability to continue to operate under predefined conditions&lt;/li&gt;
&lt;li&gt;availability - ratio of the available system time to the total working time&lt;/li&gt;
&lt;li&gt;scalability - ability of the system to handle load increases without decreasing performance&lt;/li&gt;
&lt;li&gt;efficiency&lt;/li&gt;
&lt;li&gt;performance&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;cost&lt;/li&gt;
&lt;li&gt;interoperability&lt;/li&gt;
&lt;li&gt;correctness&lt;/li&gt;
&lt;li&gt;maintainability&lt;/li&gt;
&lt;li&gt;readability&lt;/li&gt;
&lt;li&gt;extensibility&lt;/li&gt;
&lt;li&gt;testability&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;patterns&#34;&gt;Patterns&lt;/h2&gt;
&lt;p&gt;modern cloud native architecture patterns &lt;em&gt;as of July 2020&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;event-sourcing&#34;&gt;event-sourcing&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Capture all changes to an application state as a sequence of events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;core-design-decisions&#34;&gt;Core Design Decisions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Domain Entities and Events
&lt;ul&gt;
&lt;li&gt;popular method is via &lt;a href=&#34;https://en.wikipedia.org/wiki/Event_storming&#34;&gt;Event Storming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Event Content
&lt;ul&gt;
&lt;li&gt;each event stores delta state&lt;/li&gt;
&lt;li&gt;each event stores full state
&lt;ul&gt;
&lt;li&gt;idempotent is easy to solve for duplicate events&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Total Ordering (ordered stream of events - ledger)
&lt;ul&gt;
&lt;li&gt;ensure all event are processed in order.  this is needed for causal relationships.&lt;/li&gt;
&lt;li&gt;e.g. ordering matters for two messages related to the same entity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resources&#34;&gt;Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/scaling-event-sourcing-for-netflix-downloads-episode-1-6bc1595c5595&#34;&gt;Scaling Event Sourcing for Netflix Downloads, Episode 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/scaling-event-sourcing-for-netflix-downloads-episode-2-ce1b54d46eec&#34;&gt;Scaling Event Sourcing for Netflix Downloads, Episode 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/netflix-scale-event-sourcing&#34;&gt;InfoQ | Scaling Event Sourcing for Netflix Downloads | Video + Presentation&lt;/a&gt; - shows in detail how they implemented event sourcing backed by cassandra&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/eaaDev/EventSourcing.html&#34;&gt;matrinfowler.com | Event Sourcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://microservices.io/patterns/data/event-sourcing.html&#34;&gt;Pattern: Event sourcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/serverless-transformation/eventbridge-storming-how-to-build-state-of-the-art-event-driven-serverless-architectures-e07270d4dee&#34;&gt;EventBridge Storming â€” How to build state-of-the-art Event-Driven Serverless Architectures&lt;/a&gt; - approach to defining the Events, Boundaries and Entities in your business domain&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/capital-one-tech/event-storming-decomposing-the-monolith-to-kick-start-your-microservice-architecture-acb8695a6e61&#34;&gt;Decomposing the Monolith with Event Storming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;hexagonal&#34;&gt;Hexagonal&lt;/h3&gt;
&lt;p&gt;the ports and adapters architecture.  decouples core domain logic from specific storage, database, protocol, etc.&lt;/p&gt;
&lt;h4 id=&#34;resources-1&#34;&gt;Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.octo.com/en/hexagonal-architecture-three-principles-and-an-implementation-example/&#34;&gt;Hexagonal Architecture: three principles and an implementation example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;topics--concepts--terms&#34;&gt;Topics / Concepts / Terms&lt;/h2&gt;
&lt;h3 id=&#34;database&#34;&gt;Database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CAP_theorem&#34;&gt;CAP theorem&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Consistency: Every read receives the most recent write or an error&lt;/li&gt;
&lt;li&gt;Availability: Every request receives a (non-error) response, without the guarantee that it contains the most recent write&lt;/li&gt;
&lt;li&gt;Partition tolerance: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serializability&#34;&gt;Serializability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Snapshot_isolation&#34;&gt;Snapshot isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Multiversion_concurrency_control&#34;&gt;Multiversion concurrency control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@rakyll/things-i-wished-more-developers-knew-about-databases-2d0178464f78&#34;&gt;Things I Wished More Developers Knew About Databases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shuffle-sharding&#34;&gt;Shuffle Sharding&lt;/h3&gt;
&lt;p&gt;limits / isolates tenants in a multi-tenant system so they don&amp;rsquo;t negatively impact other tenants.  method of assigning tenant to resources.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/builders-library/workload-isolation-using-shuffle-sharding/?did=ba_card&amp;amp;trk=ba_card&#34;&gt;Workload isolation using shuffle-sharding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constant-work&#34;&gt;Constant Work&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;overprovision resources to the point where it would operate correctly even if an availability zone were to be unavailable&lt;/li&gt;
&lt;li&gt;if AZ becomes unavailable, no new resources need to be provisioned, just a quick re-routing.  you are essentially always operating the infrastructure for failure mode (active-active)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/builders-library/static-stability-using-availability-zones&#34;&gt;Static stability using Availability Zones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;canary&#34;&gt;Canary&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A canary release is a technique to reduce the risk from deploying a new version of software into production. A new version of software, referred to as the canary, is deployed to a small subset of users alongside the stable running version. Traffic is split between these two versions such that a portion of incoming requests are diverted to the canary. This approach can quickly uncover any problems with the new version without impacting the majority of users.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/automated-canary-analysis-at-netflix-with-kayenta-3260bc7acc69&#34;&gt;Automated Canary Analysis at Netflix with Kayenta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;resources-2&#34;&gt;Resources&lt;/h2&gt;
&lt;h3 id=&#34;books-oreillycomhttpslearningoreillycom&#34;&gt;Books (&lt;a href=&#34;https://learning.oreilly.com&#34;&gt;&lt;em&gt;oreilly.com&lt;/em&gt;&lt;/a&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/fundamentals-of-software/9781492043447/&#34;&gt;Fundamentals of Software Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/clean-architecture-a/9780134494272/&#34;&gt;Clean Architecture: A Craftsman&amp;rsquo;s Guide to Software Structure and Design, First Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/software-architecture-patterns/9781491971437&#34;&gt;Software Architecture Patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/building-evolutionary-architectures/9781491986356/&#34;&gt;Building Evolutionary Architectures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/clean-architecture-a/9780134494272/&#34;&gt;Clean Architecture: A Craftsman&amp;rsquo;s Guide to Software Structure and Design, First Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/domain-driven-design-tackling/0321125215/&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/microservices-patterns/9781617294549/&#34;&gt;Microservices Patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/patterns-of-enterprise/0321127420/&#34;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/refactoring-improving-the/9780134757681/&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/design-patterns-elements/0201633612/&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/designing-distributed-systems/9781491983638&#34;&gt;Designing Distributed Systems&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Designing-Distributed-Control-Systems-Language/dp/1118694155/&#34;&gt;Designing Distributed Control Systems: A Pattern Language Approach (Wiley Software Patterns Series)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;websites&#34;&gt;Websites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/&#34;&gt;martinfowler.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/architecture&#34;&gt;AWS Architecture Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/architecture&#34;&gt;AWS Architecture Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/builders-library/?cards-body.sort-by=item.additionalFields.customSort&amp;amp;cards-body.sort-order=asc&#34;&gt;Amazon Builders&#39; Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/&#34;&gt;Azure Architecture Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/tag/software-architecture&#34;&gt;medium | articles tagged with &amp;ldquo;software architecture&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://c4model.com/&#34;&gt;C4 model for visualizing software architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
  </channel>
</rss>