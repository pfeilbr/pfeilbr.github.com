<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>aws on Brian Pfeil</title>
        <link>https://brianpfeil.com/categories/aws/</link>
        <description>Recent content in aws on Brian Pfeil</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 30 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://brianpfeil.com/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
<title>AWS SAM Local Invoke with Lambda Role</title>
<link>https://brianpfeil.com/post/aws-sam-local-invoke-with-lambda-role/</link>
<pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brianpfeil.com/post/aws-sam-local-invoke-with-lambda-role/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/aws-sam-golang-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/aws-sam-golang-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/serverless/sam/&#34;&gt;AWS Serverless Application Model&lt;/a&gt; (SAM) allows you to develop and test your lambda backed API Gateway endpoints locally via &lt;a href=&#34;https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-start-api.html&#34;&gt;sam local start-api&lt;/a&gt;.  By default, your function is invoked with the default credentials you have configured for the &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html&#34;&gt;AWS CLI&lt;/a&gt;.  If your function accesses other AWS services, it may encounter permission issues.  It&amp;rsquo;s ideal to have your lambda run under as close to the same security context locally as it would when deployed.  In the example below, lambda sends a message to a SQS worker queue.  The permissions for the queue are configured to allow the lambda role to send a message to it.  The following details how to achieve this.&lt;/p&gt;
&lt;h3 id=&#34;allowing-our-lambda-role-to-be-assumed&#34;&gt;Allowing Our Lambda Role to be Assumed&lt;/h3&gt;
&lt;p&gt;In our scenario, we have a local user profile named &lt;code&gt;admin&lt;/code&gt; stored in &lt;code&gt;~/.aws/credentials&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[admin]
aws_access_key_id     = YOUR_ACCESS_KEY
aws_secret_access_key = YOUR_SECRET_ACCESS_KEY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This user needs to be able to assume our &lt;code&gt;my-lambda-role&lt;/code&gt; role.  We define the following &lt;strong&gt;Role Trust&lt;/strong&gt; policy to enable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2012-10-17&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;Statement&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Principal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Service&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;lambda.amazonaws.com&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sts:AssumeRole&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Principal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;AWS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;arn:aws:iam::xxxxxxxxxxxx:user/admin&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sts:AssumeRole&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configure-assume-role-via-aws-cli&#34;&gt;Configure Assume Role via AWS CLI&lt;/h3&gt;
&lt;p&gt;Next we need to configure the AWS CLI to assume a role.  We can do so by adding the following to &lt;code&gt;~/.aws/config&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;# ~/.aws/config

[profile my-lambda-role]
role_arn = arn:aws:iam::xxxxxxxxxxxx:role/my-lambda-role
source_profile = admin
output = json
region = us-east-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note the &lt;code&gt;source_profile = admin&lt;/code&gt; line.  This identifies the profile in &lt;code&gt;~/.aws/credentials&lt;/code&gt; that will be used to assume the role.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See &lt;a href=&#34;https://aws.amazon.com/premiumsupport/knowledge-center/iam-assume-role-cli/&#34;&gt;How do I assume an IAM role using the AWS CLI?&lt;/a&gt; for full details on options.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can test with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;aws --profile my-lambda-role sts get-caller-identity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If successful, the response will look like.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;UserId&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;AROAXWO2SDPLLBS55Q345:botocore-session-1596129185&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Account&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxxxxxxxxxxx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Arn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;arn:aws:sts::529276214230:assumed-role/my-lambda-role/botocore-&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;running-sam-local&#34;&gt;Running SAM Local&lt;/h3&gt;
&lt;p&gt;The SQS queue URL is provided to the lambda via an environment variable.  This is defined in the SAM template&lt;/p&gt;
&lt;p&gt;&lt;code&gt;template.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;QUEUE_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;!&lt;span class=&#34;l&#34;&gt;Ref Queue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need &lt;code&gt;QUEUE_URL&lt;/code&gt; to be available to our function running locally.  To do that we can create an environment variable .json file and pass as a parameter for sam local to use.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env-vars.json&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Parameters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;QUEUE_URL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://sqs.us-east-1.amazonaws.com/xxxxxxxxxxxx/aws-sam-golang-example-Queue-Q12J860AETTS&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now start the local SAM API server and test our endpoint&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sam &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; start-api --profile my-lambda-role --env-vars env-vars.json

curl -X POST http://127.0.0.1:3000/job -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;my job&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ve seen how to run a lambda locally with the same security context as when deployed.  SAM provides a great development workflow to allow quick iterations.  The local environment provided via docker tries to be as true to the AWS environment, but you should test with the real services as early as possible.&lt;/p&gt;
&lt;p&gt;One point to note, you must have the AWS resources your lambda is interacting with provisioned.  For example, the SQS queue must exist.  SAM does not provide a locally running SQS service.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/pfeilbr/aws-sam-golang-playground&#34;&gt;source&lt;/a&gt; for this example is written in Go, which has a great workflow.  Our focus wasn&amp;rsquo;t on the code, but if you want more &lt;strong&gt;Go + SAM + Lambda&lt;/strong&gt;, be sure to check out the AWS &lt;a href=&#34;https://golang.serverlessworkshops.io/&#34;&gt;GO SERVERLESS!&lt;/a&gt; workshop by AWS Serverless Developer Advocate &lt;a href=&#34;https://twitter.com/rts_rob&#34;&gt;Rob Sutter&lt;/a&gt;.  It covers the details and workflow of using Go with SAM.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Serverless Architecture: Key Service Considerations</title>
<link>https://brianpfeil.com/post/serverless-architecture-key-considerations-per-service/</link>
<pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brianpfeil.com/post/serverless-architecture-key-considerations-per-service/</guid>
<description>&lt;p&gt;A serverless architecture is &amp;ldquo;typically&amp;rdquo; composed of many services.  The following
covers the key considerations and configuration options for the &lt;em&gt;most common&lt;/em&gt; AWS services leveraged for serverless architectures.&lt;/p&gt;
&lt;hr&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#relevant-patterns&#34;&gt;Relevant Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambda&#34;&gt;Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sns&#34;&gt;SNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sqs&#34;&gt;SQS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kinesis&#34;&gt;Kinesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eventbridge&#34;&gt;EventBridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dynamodb&#34;&gt;DynamoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-functions&#34;&gt;Step Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#api-gateway&#34;&gt;API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudfront&#34;&gt;CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#route53&#34;&gt;Route53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#global-accelerator&#34;&gt;Global Accelerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#waf&#34;&gt;WAF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;hr&gt;
&lt;h3 id=&#34;relevant-patterns&#34;&gt;Relevant Patterns&lt;/h3&gt;
&lt;p&gt;common cloud native patterns to consider in the context of serverless architectures &lt;u&gt;of scale&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;event sourcing&lt;/li&gt;
&lt;li&gt;circuit breaker - trip circuit to prevent downstream systems overload&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/builders-library/using-load-shedding-to-avoid-overload/&#34;&gt;load shedding&lt;/a&gt; - prevent backlog buildup&lt;/li&gt;
&lt;li&gt;handle poison messages - prevent kinesis and dynamodb streams from progressing&lt;/li&gt;
&lt;li&gt;prevent distributed transactions.  e.g. lambda send job to SQS and stores status in dynamodb.  break it up.  lambda put job status in dynamo -&amp;gt; dynamo stream -&amp;gt; lambda send job to SQS&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lambdahttpsawsamazoncomlambda&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;Lambda&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;synchronous vs asynchronous vs poll based (poll based is sync) - impacts automatic retries, stuck messages due to poison message, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;see &lt;a href=&#34;https://aws.amazon.com/blogs/architecture/understanding-the-different-ways-to-invoke-lambda-functions/&#34;&gt;Understanding the Different Ways to Invoke Lambda Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if lambda is strictly a glue passthrough for API Gateway to call a backend AWS service, look to use &lt;a href=&#34;https://lumigo.io/blog/the-why-when-and-how-of-api-gateway-service-proxies/&#34;&gt;API Gateway Service Proxies&lt;/a&gt; to remove lambda.  simpler/cheaper/etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DLQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lambda destinations (only for async invokes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reserved concurrency - concurrency allocated for a specific function. e.g. i always want fn X to be able to run 10 lambda invokes concurrently&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provisioned concurrency - pre-warmed lambda instances / no cold starts.  good for latency sensitive needs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can optionally use auto scaling to adjust on based on metrics and/or schedule.&lt;/li&gt;
&lt;li&gt;will spill over to on-demand scaling (lambda default)&lt;/li&gt;
&lt;li&gt;Provisioned Concurrency comes out of your regional concurrency limit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;concurrent executions (throttles) - 1000 per account&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeout - 15min&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set code timeouts based on remaining invocation time provided in context&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;burst concurrency - 500 - 3000&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;burst - 500 new instances / min&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;poll based options (kinesis, dynamodb, SQS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on-failure destination (SNS or SQS)&lt;/li&gt;
&lt;li&gt;retry attempts&lt;/li&gt;
&lt;li&gt;max age of record - use to implement load shedding (prioritize newer messages)&lt;/li&gt;
&lt;li&gt;split batch on error&lt;/li&gt;
&lt;li&gt;concurrent batches per shard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;snshttpsawsamazoncomsns&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/sns/&#34;&gt;SNS&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fan out to address scale&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;KMS&lt;/a&gt; to encrypt payloads&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sqshttpsawsamazoncomsqs&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/sqs/&#34;&gt;SQS&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;batch size - batch fails as unit&lt;/li&gt;
&lt;li&gt;visibility timeout - set to 6x lambda timeout&lt;/li&gt;
&lt;li&gt;message retention period&lt;/li&gt;
&lt;li&gt;delivery delay - max 15min&lt;/li&gt;
&lt;li&gt;types - standard vs FIFO
&lt;ul&gt;
&lt;li&gt;standard - at least once delivery.  need to ensure idempotent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;alarm on queue depth&lt;/li&gt;
&lt;li&gt;KMS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kinesishttpsawsamazoncomkinesis&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/kinesis/&#34;&gt;Kinesis&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;partition key - choose wisely as order is guaranteed per shard and pk determines the shard the message lands on&lt;/li&gt;
&lt;li&gt;poison messages (retry until success - can cause backlog)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/kms/&#34;&gt;KMS&lt;/a&gt; to encrypt payloads&lt;/li&gt;
&lt;li&gt;enhanced fan-out via AWS::Kinesis::StreamConsumer.  each consumer gets 2 MiB per second for every shard you subscribe to.  can subscribe a max of 5 consumers per stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;eventbridgehttpsawsamazoncomeventbridge&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/eventbridge/&#34;&gt;EventBridge&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;put events - 2400 requests per second per region&lt;/li&gt;
&lt;li&gt;invocation &lt;a href=&#34;https://docs.aws.amazon.com/eventbridge/latest/userguide/cloudwatch-limits-eventbridge.html&#34;&gt;quota&lt;/a&gt; -  4500 requests per second per region (invocation is an event matching a rule and being sent on to the rule’s targets)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dynamodbhttpsawsamazoncomdynamodb&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/dynamodb/&#34;&gt;DynamoDB&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;global tables - for resilient active-active architectures&lt;/li&gt;
&lt;li&gt;throttles&lt;/li&gt;
&lt;li&gt;streams - 24hr data retention.  poison messages (retry until success - can cause backlog)&lt;/li&gt;
&lt;li&gt;partition key - distribute data among nodes to minimize hot partitions&lt;/li&gt;
&lt;li&gt;TTL - can the data be removed automatically&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-functionshttpsawsamazoncomstep-functions&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/step-functions/&#34;&gt;Step Functions&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Standard Workflows vs &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2019/12/introducing-aws-step-functions-express-workflows/&#34;&gt;Express Workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://theburningmonk.com/2017/07/applying-the-saga-pattern-with-aws-lambda-and-step-functions/&#34;&gt;saga&lt;/a&gt; pattern for rollback&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-step-functions-support-for-dynamic-parallelism/&#34;&gt;parallel map&lt;/a&gt; opportunities - run tasks in parallel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;api-gatewayhttpsawsamazoncomapi-gateway&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34;&gt;API Gateway&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;REST API vs &lt;a href=&#34;https://aws.amazon.com/blogs/compute/announcing-http-apis-for-amazon-api-gateway/&#34;&gt;HTTP API&lt;/a&gt; (&lt;a href=&#34;https://aws.amazon.com/api-gateway/pricing/&#34;&gt;cheaper&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html&#34;&gt;caching&lt;/a&gt; - fixed cost based on time / no pay per use&lt;/li&gt;
&lt;li&gt;throttles&lt;/li&gt;
&lt;li&gt;timeout - 29s&lt;/li&gt;
&lt;li&gt;auth - cognito, JWT, IAM (aws sigv4), custom lambda auth&lt;/li&gt;
&lt;li&gt;OpenAPI specs for payload validation&lt;/li&gt;
&lt;li&gt;service proxies - no need for lambda glue in middle&lt;/li&gt;
&lt;li&gt;custom domains&lt;/li&gt;
&lt;li&gt;websockets&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudfronthttpsawsamazoncomcloudfront&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/cloudfront/&#34;&gt;CloudFront&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html&#34;&gt;origin access identity&lt;/a&gt; to force traffic through CloudFront and removes direct access to S3 website domain URL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html&#34;&gt;signed URLs or cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;lambda@edge - headers only requests, rewrite URLs, server-side rendering (SSR), auth, etc.&lt;/li&gt;
&lt;li&gt;cache invalidations&lt;/li&gt;
&lt;li&gt;non GET HTTP methods support.  must explicitly turn on support for PUT, POST, PATCH, etc.&lt;/li&gt;
&lt;li&gt;WAF in front&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;route53httpsawsamazoncomroute53&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/route53/&#34;&gt;Route53&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-geoproximity&#34;&gt;Geoproximity routing&lt;/a&gt; for global solutions serving multiple regions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;global-acceleratorhttpsawsamazoncomglobal-accelerator&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/global-accelerator/&#34;&gt;Global Accelerator&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;uses the AWS global network to optimize the path from your users to your applications, improving the performance of your traffic by as much as 60%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;wafhttpsawsamazoncomwaf&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/waf/&#34;&gt;WAF&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;can put in front of API Gateway or CloudFront&lt;/li&gt;
&lt;li&gt;API Gateway provides overlapping functionality with WAF.  Need to determine the appropriate service to use.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>AWS Services</title>
<link>https://brianpfeil.com/post/aws-services/</link>
<pubDate>Sun, 29 Mar 2020 09:40:13 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/aws-services/</guid>
<description>&lt;blockquote&gt;
&lt;p&gt;A quick reference for key AWS services and what they do&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#networking-and-content-delivery&#34;&gt;Networking and Content Delivery&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#vpc&#34;&gt;VPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#elbalb&#34;&gt;ELB/ALB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vpc-endpoint&#34;&gt;VPC Endpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#route-53&#34;&gt;Route 53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloud-map&#34;&gt;Cloud Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#global-accelerator&#34;&gt;Global Accelerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudfront&#34;&gt;CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#api-gateway&#34;&gt;API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#appsync&#34;&gt;AppSync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compute&#34;&gt;Compute&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ec2&#34;&gt;EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ecs&#34;&gt;ECS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fargate&#34;&gt;Fargate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#batch&#34;&gt;Batch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eks&#34;&gt;EKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lightsail&#34;&gt;LightSail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#elastic-beanstalk&#34;&gt;Elastic Beanstalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambda&#34;&gt;Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambdaedge&#34;&gt;Lambda@Edge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#storage&#34;&gt;Storage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#s3&#34;&gt;S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#glacier&#34;&gt;Glacier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#efs-elastic-file-system&#34;&gt;EFS (Elastic File System)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fsx-for-windows-file-server&#34;&gt;FSx for Windows File Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ebs&#34;&gt;EBS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transfer&#34;&gt;Transfer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#database&#34;&gt;Database&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dynamodb&#34;&gt;DynamoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#documentdb-mongodb-compatibility&#34;&gt;DocumentDB (MongoDB compatibility)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rds&#34;&gt;RDS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#redshift&#34;&gt;Redshift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#elasticache&#34;&gt;ElastiCache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#neptune&#34;&gt;Neptune&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#timestream&#34;&gt;Timestream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloud-directory&#34;&gt;Cloud Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ssm-parameter-store&#34;&gt;SSM Parameter Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#application-integration&#34;&gt;Application Integration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step-functions&#34;&gt;Step Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sns&#34;&gt;SNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sqs&#34;&gt;SQS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eventbridge&#34;&gt;EventBridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kinesis&#34;&gt;Kinesis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#analytics&#34;&gt;Analytics&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#kinesis-data-analytics&#34;&gt;Kinesis Data Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pinpoint&#34;&gt;Pinpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#emr&#34;&gt;EMR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-pipelines&#34;&gt;Data Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#glue&#34;&gt;Glue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#athena&#34;&gt;Athena&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quicksight&#34;&gt;QuickSight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lake-formation&#34;&gt;Lake Formation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#management--governance&#34;&gt;Management &amp;amp; Governance&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#control-tower&#34;&gt;Control Tower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#organizations&#34;&gt;Organizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudformation&#34;&gt;CloudFormation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#service-catalog&#34;&gt;Service Catalog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudwatch-logs&#34;&gt;CloudWatch Logs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudwatch-events&#34;&gt;CloudWatch Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudwatch-insights&#34;&gt;CloudWatch Insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudwatch-metrics&#34;&gt;CloudWatch Metrics&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#resources-1&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudwatch-alarms&#34;&gt;CloudWatch Alarms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudtrail&#34;&gt;CloudTrail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#developer-tools&#34;&gt;Developer Tools&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cloud9&#34;&gt;Cloud9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#codecommit&#34;&gt;CodeCommit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#codebuild&#34;&gt;CodeBuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#codedeploy&#34;&gt;CodeDeploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#codepipeline&#34;&gt;CodePipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#x-ray&#34;&gt;X-Ray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#amplify&#34;&gt;Amplify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#machine-learning&#34;&gt;Machine Learning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sagemaker&#34;&gt;SageMaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comprehend&#34;&gt;Comprehend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polly&#34;&gt;Polly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rekognition&#34;&gt;Rekognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#textract&#34;&gt;Textract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#translate&#34;&gt;Translate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transcribe&#34;&gt;Transcribe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#forecast&#34;&gt;Forecast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#personalize&#34;&gt;Personalize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lex&#34;&gt;Lex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#security-identity-and-compliance&#34;&gt;Security, Identity, and Compliance&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#iam&#34;&gt;IAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cognito&#34;&gt;Cognito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#secrets-manager&#34;&gt;Secrets Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#waf&#34;&gt;WAF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#firewall-manager&#34;&gt;Firewall Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#certificate-manager-acm&#34;&gt;Certificate Manager (ACM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kms&#34;&gt;KMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#directory-service&#34;&gt;Directory Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;hr&gt;
&lt;h2 id=&#34;networking-and-content-delivery&#34;&gt;Networking and Content Delivery&lt;/h2&gt;
&lt;h3 id=&#34;vpc&#34;&gt;VPC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;virtual private cloud&lt;/li&gt;
&lt;li&gt;Subnets, route tables, internet gateways, elastic ips, nat gateways, network ACLs, security groups&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elbalb&#34;&gt;ELB/ALB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;elastic (TCP) | application load balancer (http layer 7)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vpc-endpoint&#34;&gt;VPC Endpoint&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;connect to AWS services from VPC without going through internet&lt;/li&gt;
&lt;li&gt;enables you to privately connect your VPC to supported AWS services and VPC endpoint services powered by PrivateLink without requiring an internet gateway, NAT device, VPN connection, or AWS Direct Connect connection&lt;/li&gt;
&lt;li&gt;gateway endpoint - S3 and DynamoDB.  via VPC route table.
&lt;ul&gt;
&lt;li&gt;gateway that you specify as a target for a route in your route table for traffic destined to a supported AWS service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;interface endpoint - all other services.  via DNS resolver for VPC/subnets
&lt;ul&gt;
&lt;li&gt;an elastic network interface with a private IP address from the IP address range of your subnet that serves as an entry point for traffic destined to a supported service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;route-53&#34;&gt;Route 53&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;managed DNS&lt;/li&gt;
&lt;li&gt;domain registration&lt;/li&gt;
&lt;li&gt;DNS / hosted zones&lt;/li&gt;
&lt;li&gt;Traffic Flow makes it easy for you to manage traffic globally through a variety of routing types, including Latency Based Routing, Geo DNS, Geoproximity, and Weighted Round Robin&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloud-map&#34;&gt;Cloud Map&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;name and discover your cloud resources via API or DNS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;global-accelerator&#34;&gt;Global Accelerator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;uses the highly available and congestion-free AWS global network to direct internet traffic from your users to your applications on AWS&lt;/li&gt;
&lt;li&gt;fixed entry point to your applications through static IP addresses&lt;/li&gt;
&lt;li&gt;allocates static Anycast IP addresses that are globally unique for your application and do not change&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudfront&#34;&gt;CloudFront&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CDN&lt;/li&gt;
&lt;li&gt;edge / PoP locations.  traffic over AWS global infrastructure&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html&#34;&gt;Restricting Access to Amazon S3 Content by Using an Origin Access Identity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;api-gateway&#34;&gt;API Gateway&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;edge (cloudfront) and regional endpoints&lt;/li&gt;
&lt;li&gt;API Keys&lt;/li&gt;
&lt;li&gt;Usage Plans / quotas&lt;/li&gt;
&lt;li&gt;websockets&lt;/li&gt;
&lt;li&gt;custom domains&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;appsync&#34;&gt;AppSync&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GraphQL managed service&lt;/li&gt;
&lt;li&gt;integrates with Amazon DynamoDB, Amazon Elasticsearch, and Amazon Lambda&lt;/li&gt;
&lt;li&gt;Real-time subscriptions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;compute&#34;&gt;Compute&lt;/h2&gt;
&lt;h3 id=&#34;ec2&#34;&gt;EC2&lt;/h3&gt;
&lt;h3 id=&#34;ecs&#34;&gt;ECS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;containers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fargate&#34;&gt;Fargate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;containers&lt;/li&gt;
&lt;li&gt;run containers without having to manage servers or clusters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;batch&#34;&gt;Batch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;run batch computing jobs using containers&lt;/li&gt;
&lt;li&gt;concepts: Compute Environments (compute), Job Queues, Job Definitions (docker image), Jobs (things that run)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;eks&#34;&gt;EKS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;managed Kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lightsail&#34;&gt;LightSail&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Virtual servers, storage, databases, and networking for a low, predictable price.&lt;/li&gt;
&lt;li&gt;backed by EC2, but easier to use&lt;/li&gt;
&lt;li&gt;similar to DigitalOcean&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elastic-beanstalk&#34;&gt;Elastic Beanstalk&lt;/h3&gt;
&lt;h3 id=&#34;lambda&#34;&gt;Lambda&lt;/h3&gt;
&lt;h3 id=&#34;lambdaedge&#34;&gt;Lambda@Edge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;feature of Amazon CloudFront that lets you run code closer to users of your application, which improves performance and reduces latency&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;storage&#34;&gt;Storage&lt;/h2&gt;
&lt;h3 id=&#34;s3&#34;&gt;S3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;object/blob storage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;glacier&#34;&gt;Glacier&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;low cost/long-term object/blob storage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;efs-elastic-file-system&#34;&gt;EFS (Elastic File System)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;elastic file system for Linux-based workloads for use with AWS Cloud services and on-premises resources.&lt;/li&gt;
&lt;li&gt;can mount as NFS v4&lt;/li&gt;
&lt;li&gt;e.g. shared file system.  many EC2 instances can mount same efs file system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fsx-for-windows-file-server&#34;&gt;FSx for Windows File Server&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fully managed native windows file system&lt;/li&gt;
&lt;li&gt;SMB, NTFS, AD integration&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ebs&#34;&gt;EBS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;block level storage volumes for use with EC2 instances. EBS volumes behave like raw, unformatted block devices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;transfer&#34;&gt;Transfer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SFTP to S3&lt;/li&gt;
&lt;li&gt;enables the transfer of files directly into and out of S3 using SFTP&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;database&#34;&gt;Database&lt;/h2&gt;
&lt;h3 id=&#34;dynamodb&#34;&gt;DynamoDB&lt;/h3&gt;
&lt;h3 id=&#34;documentdb-mongodb-compatibility&#34;&gt;DocumentDB (MongoDB compatibility)&lt;/h3&gt;
&lt;h3 id=&#34;rds&#34;&gt;RDS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Aurora, PostgreSQL, MySql, MariaDB, Oracle, SQL Sever&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redshift&#34;&gt;Redshift&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;managed data warehouse service&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elasticache&#34;&gt;ElastiCache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;redis and memcached&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elasticsearch&#34;&gt;ElasticSearch&lt;/h3&gt;
&lt;h3 id=&#34;neptune&#34;&gt;Neptune&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;graph database. query languages Apache TinkerPop Gremlin and SPARQL (RDF)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;timestream&#34;&gt;Timestream&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;time series database&lt;/li&gt;
&lt;li&gt;InfluxDB, Prometheus, Riak&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloud-directory&#34;&gt;Cloud Directory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cloud-native directory that can store hundreds of millions of application-specific objects with multiple relationships and schemas&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ssm-parameter-store&#34;&gt;SSM Parameter Store&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Systems Manager Parameter Store provides secure, hierarchical storage for configuration data management and secrets management&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;application-integration&#34;&gt;Application Integration&lt;/h2&gt;
&lt;h3 id=&#34;step-functions&#34;&gt;Step Functions&lt;/h3&gt;
&lt;p&gt;orchestration with many built-in integrations to aws services&lt;/p&gt;
&lt;h3 id=&#34;sns&#34;&gt;SNS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pub/sub&lt;/li&gt;
&lt;li&gt;message filtering with subscription&lt;/li&gt;
&lt;li&gt;push notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sqs&#34;&gt;SQS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;managed message queuing service&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;eventbridge&#34;&gt;EventBridge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pub/sub with many built-in integrations&lt;/li&gt;
&lt;li&gt;integrate with external SaaS or any custom application&lt;/li&gt;
&lt;li&gt;e.g. can log all events in account including CloudTrail to CloudWatch Log Group&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kinesis&#34;&gt;Kinesis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;collect, process, and analyze real-time, streaming data&lt;/li&gt;
&lt;li&gt;kafka alternative&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;analytics&#34;&gt;Analytics&lt;/h2&gt;
&lt;h3 id=&#34;kinesis-data-analytics&#34;&gt;Kinesis Data Analytics&lt;/h3&gt;
&lt;p&gt;analyze streaming data with SQL&lt;/p&gt;
&lt;h3 id=&#34;pinpoint&#34;&gt;Pinpoint&lt;/h3&gt;
&lt;p&gt;usage, customer, and engagement analytics&lt;/p&gt;
&lt;h3 id=&#34;emr&#34;&gt;EMR&lt;/h3&gt;
&lt;p&gt;hadoop, spark, and friends&lt;/p&gt;
&lt;h3 id=&#34;data-pipelines&#34;&gt;Data Pipelines&lt;/h3&gt;
&lt;p&gt;data processing workloads&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AWS Data Pipeline, you can regularly access your data where it’s stored, transform and process it at scale, and efficiently transfer the results to AWS services such as Amazon S3, Amazon RDS, Amazon DynamoDB, and Amazon EMR.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;glue&#34;&gt;Glue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;catalog / metadata (hive metadata catalog)&lt;/li&gt;
&lt;li&gt;crawlers autodiscover schema&lt;/li&gt;
&lt;li&gt;[py]spark and scala&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;athena&#34;&gt;Athena&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;query S3 data in place.  pay per query / data accessed.&lt;/li&gt;
&lt;li&gt;integrated with glue catalog&lt;/li&gt;
&lt;li&gt;Presto&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;quicksight&#34;&gt;QuickSight&lt;/h3&gt;
&lt;h3 id=&#34;lake-formation&#34;&gt;Lake Formation&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;management--governance&#34;&gt;Management &amp;amp; Governance&lt;/h2&gt;
&lt;h3 id=&#34;control-tower&#34;&gt;Control Tower&lt;/h3&gt;
&lt;p&gt;set up and govern a new, secure multi-account AWS environment.  builders can provision new AWS accounts in a few clicks, while you have peace of mind knowing your accounts conform to your company-wide policies&lt;/p&gt;
&lt;h3 id=&#34;organizations&#34;&gt;Organizations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;account management service that lets you consolidate multiple AWS accounts into an organization that you create and centrally manage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudformation&#34;&gt;CloudFormation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;declarative provisioning of AWS infrastructure/resource&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service-catalog&#34;&gt;Service Catalog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create and manage catalogs of IT services that are approved for use on AWS&lt;/li&gt;
&lt;li&gt;concepts:
&lt;ul&gt;
&lt;li&gt;products are cloudformation templates&lt;/li&gt;
&lt;li&gt;portfolio is collection of products
&lt;ul&gt;
&lt;li&gt;access to portfolios is via IAM users, groups, roles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IT administrator creates products and portfolios and grants access&lt;/li&gt;
&lt;li&gt;End user accesses products and deploys them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;approved self-service products from Solution Factory
&lt;ul&gt;
&lt;li&gt;e.g. Oracle RDS DB with all security, tags, etc. in place&lt;/li&gt;
&lt;li&gt;e.g. static web site. S3 + CloudFormation + WAF + ACM (certificate) + Route 53 (hosted zone, domain)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;config&#34;&gt;Config&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AWS Config is a service that enables you to assess, audit, and evaluate the configurations of your AWS resources. Config continuously monitors and records your AWS resource configurations and allows you to automate the evaluation of recorded configurations against desired configurations.&lt;/li&gt;
&lt;li&gt;define rules that get evaluated when any change is made (e.g. resource provisioned)&lt;/li&gt;
&lt;li&gt;there are aws managed rules that are part of the service and you can define custom ones via lambda&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudwatch-logs&#34;&gt;CloudWatch Logs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;centralize the logs from all of your systems, applications, and AWS services that you use, in a single, highly scalable service&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resources&#34;&gt;Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html&#34;&gt;CloudWatch Metric Filters&lt;/a&gt; - define custom metrics based on a pattern matched to log streams in a log group.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/aws/simplified-time-series-analysis-with-amazon-cloudwatch-contributor-insights/&#34;&gt;Simplified Time-Series Analysis with Amazon CloudWatch Contributor Insights&lt;/a&gt; - generate metrics from CWL data (JSON or CLF formats)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudwatch-events&#34;&gt;CloudWatch Events&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cron triggers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudwatch-insights&#34;&gt;CloudWatch Insights&lt;/h3&gt;
&lt;p&gt;query log groups&lt;/p&gt;
&lt;h3 id=&#34;cloudwatch-metrics&#34;&gt;CloudWatch Metrics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A metric represents a time-ordered set of data points that are published to CloudWatch&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resources-1&#34;&gt;Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/devops/building-an-amazon-cloudwatch-dashboard-outside-of-the-aws-management-console/&#34;&gt;Building an Amazon CloudWatch Dashboard Outside of the AWS Management Console&lt;/a&gt; - display CloudWatch dashboard outside of AWS Console.  You specify the dashboard in JSON and it returns a binary image&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudwatch-alarms&#34;&gt;CloudWatch Alarms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;notify via email, SNS topics&lt;/li&gt;
&lt;li&gt;create a CloudWatch alarm that watches a single CloudWatch metric or the result of a math expression based on CloudWatch metrics&lt;/li&gt;
&lt;li&gt;An alarm watches a single metric over a specified time period, and performs one or more specified actions, based on the value of the metric relative to a threshold over time. The action is a notification sent to an Amazon SNS topic or an Auto Scaling policy. You can also add alarms to dashboards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloudtrail&#34;&gt;CloudTrail&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;logs all recording AWS API and Management Console actions to S3&lt;/li&gt;
&lt;li&gt;can query via Athena&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;developer-tools&#34;&gt;Developer Tools&lt;/h2&gt;
&lt;h3 id=&#34;cloud9&#34;&gt;Cloud9&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cloud/browser based compute environment and IDE.&lt;/li&gt;
&lt;li&gt;dev machine (ec2 amzn linux) in the cloud with browser based IDE and terminal&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;codecommit&#34;&gt;CodeCommit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fully-managed source control service that hosts secure Git-based repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;codebuild&#34;&gt;CodeBuild&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;continuous integration service that compiles source code, runs tests, and produces software packages&lt;/li&gt;
&lt;li&gt;like Jenkins, Travis, CircleCI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;codedeploy&#34;&gt;CodeDeploy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;automates software deployments to a variety of compute services such as Amazon EC2, AWS Fargate, AWS Lambda, and your on-premises servers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;codepipeline&#34;&gt;CodePipeline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;continuous delivery service that helps you automate your release pipelines&lt;/li&gt;
&lt;li&gt;orchestrates CodeBuild and CodeDeploy&lt;/li&gt;
&lt;li&gt;sources: github, CodeCommit, S3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;x-ray&#34;&gt;X-Ray&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;distributed tracing&lt;/li&gt;
&lt;li&gt;instrument code&lt;/li&gt;
&lt;li&gt;similar to zipkin, jaeger&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;amplify&#34;&gt;Amplify&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;machine-learning&#34;&gt;Machine Learning&lt;/h2&gt;
&lt;h3 id=&#34;sagemaker&#34;&gt;SageMaker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;build, train, and deploy machine learning models&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comprehend&#34;&gt;Comprehend&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NLP (natural language processing)&lt;/li&gt;
&lt;li&gt;By utilizing NLP, you can extract important phrases, sentiment, syntax, key entities such as brand, date, location, person, etc., and the language of the text&lt;/li&gt;
&lt;li&gt;find insights and relationships in text&lt;/li&gt;
&lt;li&gt;use case e.g.: gauge whether customer sentiment is positive, neutral, negative, or mixed based on the feedback you receive via support calls, emails, social media, and other online channels&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;polly&#34;&gt;Polly&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;text-to-speech (TTS)&lt;/li&gt;
&lt;li&gt;supports MP3, Vorbis, and raw PCM audio stream formats&lt;/li&gt;
&lt;li&gt;Neural Text-to-Speech (NTTS) voices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rekognition&#34;&gt;Rekognition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;API to analyze any image or video file&lt;/li&gt;
&lt;li&gt;identify the objects, people, text, scenes, and activities, as well as detect any inappropriate content.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;textract&#34;&gt;Textract&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;extracts text and data from scanned documents&lt;/li&gt;
&lt;li&gt;supports PNG, JPEG, and PDF formats. For synchronous APIs, you can submit images either as an S3 object or as a byte array. For asynchronous APIs, you can submit S3 objects&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;translate&#34;&gt;Translate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;neural machine translation service for translating text to and from English across a breadth of supported languages&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;transcribe&#34;&gt;Transcribe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;audio to text&lt;/li&gt;
&lt;li&gt;transcription services for your audio files. It uses advanced machine learning technologies to recognize spoken words and transcribe them into text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;forecast&#34;&gt;Forecast&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;managed deep learning service for time-series forecasting. By providing Amazon Forecast with historical time-series data, you can predict future points in the series.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;personalize&#34;&gt;Personalize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create individualized recommendations for customers using their applications&lt;/li&gt;
&lt;li&gt;e.g. use cases
&lt;ul&gt;
&lt;li&gt;Personalized recommendations&lt;/li&gt;
&lt;li&gt;Similar items&lt;/li&gt;
&lt;li&gt;Personalized re-ranking i.e. re-rank a list of items for a user&lt;/li&gt;
&lt;li&gt;Personalized promotions/notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lex&#34;&gt;Lex&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;conversational interfaces into any application using voice and text. Amazon Lex provides the advanced deep learning functionalities of automatic speech recognition (ASR) for converting speech to text, and natural language understanding (NLU) to recognize the intent of the text&lt;/li&gt;
&lt;li&gt;chat bots&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;security-identity-and-compliance&#34;&gt;Security, Identity, and Compliance&lt;/h2&gt;
&lt;h3 id=&#34;iam&#34;&gt;IAM&lt;/h3&gt;
&lt;h3 id=&#34;cognito&#34;&gt;Cognito&lt;/h3&gt;
&lt;h3 id=&#34;secrets-manager&#34;&gt;Secrets Manager&lt;/h3&gt;
&lt;h3 id=&#34;waf&#34;&gt;WAF&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;web application firewall&lt;/li&gt;
&lt;li&gt;associate with CloudFront, ALB, API Gateway&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;firewall-manager&#34;&gt;Firewall Manager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;centrally configure and manage firewall rules across accounts and applications (enterprise)&lt;/li&gt;
&lt;li&gt;e.g. create firewall manager policy that states all CloudFront and ALB instances across accounts must use a specific WebACL.
&lt;ul&gt;
&lt;li&gt;you can use tags to specify which CF and ALB instances to apply the RuleGroup to&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;can automatically apply WebACL to CF and/or ALB instances or only notify &amp;ldquo;out of compliance&amp;rdquo;&lt;/li&gt;
&lt;li&gt;aws config must be enabled and running in each account.  this detects CF and ALB changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;certificate-manager-acm&#34;&gt;Certificate Manager (ACM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;provision, manage, and deploy public and private Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS services and your internal connected resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kms&#34;&gt;KMS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;key management service&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;directory-service&#34;&gt;Directory Service&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;provides multiple ways to set up and run Amazon Cloud Directory, Amazon Cognito, and Microsoft AD with other AWS services. Amazon Cloud Directory provides a highly scalable directory store for your application’s multihierarchical data. Amazon Cognito helps you create a directory store that authenticates your users either through your own user pools or through federated identity providers. AWS Directory Service for Microsoft Active Directory (Enterprise Edition), also known as Microsoft AD, enables your directory-aware workloads and AWS resources to use a managed Active Directory in the AWS Cloud.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Running Elasticsearch on AWS Elastic Beanstalk</title>
<link>https://brianpfeil.com/post/running-elasticsearch-on-elastic-beanstalk/</link>
<pubDate>Wed, 25 Mar 2015 21:25:09 +0000</pubDate>
      
      <guid>https://brianpfeil.com/post/running-elasticsearch-on-elastic-beanstalk/</guid>
<description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; code on github @ &lt;a href=&#34;https://github.com/pfeilbr/Elastic-Beanstalk-Dockerrun.aws.json-Example&#34;&gt;pfeilbr/Elastic-Beanstalk-Dockerrun.aws.json-Example&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This article will show you the steps to run &lt;a href=&#34;https://www.elastic.co/&#34;&gt;elasticsearch&lt;/a&gt; on &lt;a href=&#34;http://aws.amazon.com/elasticbeanstalk/&#34;&gt;AWS Elastic Beanstalk&lt;/a&gt;. This example uses the &lt;a href=&#34;https://registry.hub.docker.com/_/elasticsearch/&#34;&gt;elasticsearch docker image&lt;/a&gt; as an example.  Once running you can visit &lt;code&gt;http://&amp;lt;beanstalk domain&amp;gt;/?pretty&lt;/code&gt; an you will see the root elastic search JSON response.&lt;/p&gt;
&lt;h2 id=&#34;initial-deployment&#34;&gt;Initial Deployment&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Modify &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; for your needs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker_image.html#create_deploy_docker_image_dockerrun&#34;&gt;Dockerrun.aws.json&lt;/a&gt; reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit changes to repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ git commit -a -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;changes&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;assumes &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; has already been added to repo.  if not, &lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create eb app&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ eb init # populate details
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: select Docker.  Populate all details&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create environment for app&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ eb create dev-env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Must immediately update the ec2 instance with tags so it doesn&amp;rsquo;t get terminated.  Enable termination protection on the ec2 instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;deploying-updates&#34;&gt;Deploying Updates&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Modify &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; for your needs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit changes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ git commit -a -m &amp;#34;my updates&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy to eb&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ eb deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Takes between 3-5 min to deploy changes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;p&gt;Port mapping details specific to aws beanstalk&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/config.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Dockerized Node.js App on Elastic Beanstalk Example</title>
<link>https://brianpfeil.com/post/dockerized-nodejs-app-on-elastic-beanstalk-example/dockerized-nodejs-app-on-elastic-beanstalk-example/</link>
<pubDate>Wed, 25 Mar 2015 19:06:15 +0000</pubDate>
      
      <guid>https://brianpfeil.com/post/dockerized-nodejs-app-on-elastic-beanstalk-example/dockerized-nodejs-app-on-elastic-beanstalk-example/</guid>
<description>&lt;p&gt;Example of developing and deploying a &lt;a href=&#34;(https://www.docker.com/)&#34;&gt;dockerized&lt;/a&gt; &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; app to &lt;a href=&#34;http://aws.amazon.com/elasticbeanstalk/&#34;&gt;Elastic Beanstalk&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;source on Github at &lt;a href=&#34;https://github.com/pfeilbr/Elastic-Beanstalk-Docker-Node.js-Example&#34;&gt;pfeilbr/Elastic-Beanstalk-Docker-Node.js-Example&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;local-development-workflow&#34;&gt;Local Development Workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Edit code. e.g. &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build image&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ docker build --tag=&amp;#34;pfeilbr/eb-docker-node-example&amp;#34; .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ docker run -p 80:80 -it -rm -name eb-docker-node-example pfeilbr/eb-docker-node-example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get docker host ip &lt;em&gt;(optional.  only if using &lt;a href=&#34;http://boot2docker.io/&#34;&gt;boot2docker&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ boot2docker ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open browser to &lt;code&gt;http://&amp;lt;boot2docker ip&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;initial-deployment&#34;&gt;Initial Deployment&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Init git repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ git init .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add files to repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ git add .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit changes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ git commit -m &amp;#34;init&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create eb app&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ eb init # populate details
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Populate all details&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create environment for app&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ eb create dev-env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Must immediately update the ec2 instance with tags so it doesn&amp;rsquo;t get terminated.  Enable termination protection on the ec2 instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://note.io/1ETb45Y&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;deploying-updates&#34;&gt;Deploying Updates&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Modify code and test via [Local Development Workflow]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit changes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ git commit -a -m &amp;#34;my updates&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy to eb&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ eb deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Takes between 3-5 min to deploy changes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://note.io/1FFQXuL&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;establish-interactive-bash-shell-in-running-docker-container&#34;&gt;Establish Interactive Bash Shell in Running Docker Container&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ssh into ec2 docker host server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ eb ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get container name&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ sudo docker ps # save off name of container
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect/attach with an interactive bash session&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ sudo docker exec -i -t &amp;lt;container name&amp;gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example Session with Output&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://note.io/1CYSlIH&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
</item>
    
  </channel>
</rss>