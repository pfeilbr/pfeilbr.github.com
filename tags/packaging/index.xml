<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>packaging on Brian Pfeil</title>
        <link>https://brianpfeil.com/tags/packaging/</link>
        <description>Recent content in packaging on Brian Pfeil</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 07 Aug 2019 00:00:00 -0400</lastBuildDate><atom:link href="https://brianpfeil.com/tags/packaging/index.xml" rel="self" type="application/rss+xml" />
    <item>
<title>Pipenv</title>
<link>https://brianpfeil.com/post/pipenv/</link>
<pubDate>Wed, 07 Aug 2019 00:00:00 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/pipenv/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/pipenv-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/pipenv-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;learn &lt;a href=&#34;https://github.com/pypa/pipenv&#34;&gt;pipenv&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages. It also generates the ever-important Pipfile.lock, which is used to produce deterministic builds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;based on &lt;a href=&#34;https://docs.python-guide.org/dev/virtualenvs/&#34;&gt;https://docs.python-guide.org/dev/virtualenvs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# install&lt;/span&gt;
pip3 install pipenv

&lt;span class=&#34;c1&#34;&gt;# create directory&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/tmp
mkdir pipenv-playground
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; pipenv-playground

&lt;span class=&#34;c1&#34;&gt;# install dependency&lt;/span&gt;
pipenv install requests

&lt;span class=&#34;c1&#34;&gt;# write some code that uses the dependency&lt;/span&gt;
touch main.py

&lt;span class=&#34;c1&#34;&gt;# run it using the created virtualenv&lt;/span&gt;
pipenv run python main.py

&lt;span class=&#34;c1&#34;&gt;# can also specify `python3` explicitly&lt;/span&gt;
pipenv run python3 main.py

&lt;span class=&#34;c1&#34;&gt;# try with jupyter notebook&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
mkdir jupyter-notebook-playground
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; jupyter-notebook-playground
pipenv install jupyter
pipenv run jupyter notebook

&lt;span class=&#34;c1&#34;&gt;# try with jupyterlab&lt;/span&gt;
pipenv install jupyterlab
pipenv run jupyter lab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>
    
    <item>
<title>Nexe</title>
<link>https://brianpfeil.com/post/nexe/</link>
<pubDate>Tue, 05 Apr 2016 00:00:00 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/nexe/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/nexe-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/nexe-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Learn and experiment with &lt;a href=&#34;https://github.com/jaredallard/nexe&#34;&gt;nexe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nexe lets you &lt;em&gt;create a single executable out of your node.js apps&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ npm install nexe -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;
&lt;p&gt;There are two methods to run nexe, command line and by specifying the paramaters in &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;command-line&#34;&gt;Command line&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ nexe -r 4.2.4 -i ./index.js -o ./main.nex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Downloads node source 4.2.4 for the platform it&amp;rsquo;s running on in &lt;code&gt;./tmp&lt;/code&gt; directory, compiles
it, uses browserify on &lt;code&gt;./index.js&lt;/code&gt; then bundles it all an outputs &lt;code&gt;./main.nex&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;packagejson&#34;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nexe&lt;/code&gt; property of &lt;code&gt;package.json&lt;/code&gt; specifies all the parameters&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ nexe

&lt;span class=&#34;c1&#34;&gt;# output is ./main.nex, which is specified in the nexe.output property&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>
    
    <item>
<title>webpack</title>
<link>https://brianpfeil.com/post/webpack/</link>
<pubDate>Fri, 03 Apr 2015 00:00:00 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/webpack/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/webpack-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/webpack-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;A project to learn and experiment with the &lt;a href=&#34;http://webpack.github.io/&#34;&gt;webpack&lt;/a&gt; module bundler.&lt;/p&gt;
&lt;h3 id=&#34;development&#34;&gt;Development&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start local webpack server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ webpack-dev-server --progress --colors --debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;This serves all changes out of memory.  Remember to run &lt;code&gt;webpack&lt;/code&gt; by itself to persist changes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;a href=&#34;http://localhost:8080/webpack-dev-server/bundle&#34;&gt;http://localhost:8080/webpack-dev-server/bundle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make code changes.  Changes will live reload.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Persist changes by running&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ webpack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;directory-and-file-details&#34;&gt;Directory and File Details&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;public/&lt;/code&gt; - client side files
&lt;code&gt;public/lib/index.js&lt;/code&gt; - webpacks entry point&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;react-app.js&lt;/code&gt; - react application example&lt;/p&gt;
&lt;p&gt;demonstrates the usage of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jsx loader&lt;/li&gt;
&lt;li&gt;css loader&lt;/li&gt;
&lt;li&gt;es6 support&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;angular-app.js&lt;/code&gt; - angular application example&lt;/p&gt;
&lt;p&gt;demonstrates the usage of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ng-cache loader for views and partials&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
</item>
    
  </channel>
</rss>