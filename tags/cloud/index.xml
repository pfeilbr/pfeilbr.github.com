<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cloud on Brian Pfeil</title>
        <link>https://brianpfeil.com/tags/cloud/</link>
        <description>Recent content in cloud on Brian Pfeil</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 18 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://brianpfeil.com/tags/cloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
<title>Cloud Native Software Architecture</title>
<link>https://brianpfeil.com/post/cloud-native-software-architecture/</link>
<pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brianpfeil.com/post/cloud-native-software-architecture/</guid>
<description>&lt;p&gt;A personal cheatsheet/reference for cloud native software architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;architecture&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;how the components are assembled and organized. This will be done in a way that meets the quality attributes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#key-questions&#34;&gt;Key Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#organization-considerations&#34;&gt;Organization Considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quality-attributes-ities-and-friends&#34;&gt;Quality Attributes &lt;em&gt;(*ities and friends)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#patterns&#34;&gt;Patterns&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#event-sourcing&#34;&gt;event-sourcing&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#core-design-decisions&#34;&gt;Core Design Decisions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hexagonal&#34;&gt;Hexagonal&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#resources-1&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#topics--concepts--terms&#34;&gt;Topics / Concepts / Terms&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shuffle-sharding&#34;&gt;Shuffle Sharding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#constant-work&#34;&gt;Constant Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#canary&#34;&gt;Canary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources-2&#34;&gt;Resources&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#books-oreillycom&#34;&gt;Books (&lt;em&gt;oreilly.com&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#websites&#34;&gt;Websites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;hr&gt;
&lt;h2 id=&#34;key-questions&#34;&gt;Key Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;who are the users?&lt;/li&gt;
&lt;li&gt;what devices and form factors will be used?&lt;/li&gt;
&lt;li&gt;what is the context of their usage?&lt;/li&gt;
&lt;li&gt;scale and growth?&lt;/li&gt;
&lt;li&gt;who are the main actors in the system (domain objects - e.g. orders, products, etc.)?&lt;/li&gt;
&lt;li&gt;data classifications (PII)?&lt;/li&gt;
&lt;li&gt;data types and sizes (relation records, documents, media files, etc.)?&lt;/li&gt;
&lt;li&gt;what is the time frame for delivery?&lt;/li&gt;
&lt;li&gt;is there an existing product / SaaS / open-source / etc. that provides the solution or a portion / components of it&lt;/li&gt;
&lt;li&gt;capacity estimation &amp;amp; constraints?&lt;/li&gt;
&lt;li&gt;functional requirements?&lt;/li&gt;
&lt;li&gt;Non Functional Requirements - Latency, Consistency, Availability, High Throughput, etc.&lt;/li&gt;
&lt;li&gt;what is explicitly &lt;strong&gt;out of scope&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;organization and teams structure&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;see &lt;a href=&#34;https://medium.com/partha-pratim-sanyal/system-design-doordash-a-prepared-food-delivery-service-bf44093388e2&#34;&gt;System Design: DoorDash — a prepared food delivery service&lt;/a&gt; for good reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;organization-considerations&#34;&gt;Organization Considerations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;engineering (application &amp;amp; platform)&lt;/li&gt;
&lt;li&gt;operations (application &amp;amp; platform)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;quality-attributes-ities-and-friends&#34;&gt;Quality Attributes &lt;em&gt;(*ities and friends)&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;reliability - ability to continue to operate under predefined conditions&lt;/li&gt;
&lt;li&gt;availability - ratio of the available system time to the total working time&lt;/li&gt;
&lt;li&gt;scalability - ability of the system to handle load increases without decreasing performance&lt;/li&gt;
&lt;li&gt;efficiency&lt;/li&gt;
&lt;li&gt;performance&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;cost&lt;/li&gt;
&lt;li&gt;interoperability&lt;/li&gt;
&lt;li&gt;correctness&lt;/li&gt;
&lt;li&gt;maintainability&lt;/li&gt;
&lt;li&gt;readability&lt;/li&gt;
&lt;li&gt;extensibility&lt;/li&gt;
&lt;li&gt;testability&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;patterns&#34;&gt;Patterns&lt;/h2&gt;
&lt;p&gt;modern cloud native architecture patterns &lt;em&gt;as of July 2020&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;event-sourcing&#34;&gt;event-sourcing&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Capture all changes to an application state as a sequence of events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;core-design-decisions&#34;&gt;Core Design Decisions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Domain Entities and Events
&lt;ul&gt;
&lt;li&gt;popular method is via &lt;a href=&#34;https://en.wikipedia.org/wiki/Event_storming&#34;&gt;Event Storming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Event Content
&lt;ul&gt;
&lt;li&gt;each event stores delta state&lt;/li&gt;
&lt;li&gt;each event stores full state
&lt;ul&gt;
&lt;li&gt;idempotent is easy to solve for duplicate events&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Total Ordering (ordered stream of events - ledger)
&lt;ul&gt;
&lt;li&gt;ensure all event are processed in order.  this is needed for causal relationships.&lt;/li&gt;
&lt;li&gt;e.g. ordering matters for two messages related to the same entity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;resources&#34;&gt;Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/scaling-event-sourcing-for-netflix-downloads-episode-1-6bc1595c5595&#34;&gt;Scaling Event Sourcing for Netflix Downloads, Episode 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/scaling-event-sourcing-for-netflix-downloads-episode-2-ce1b54d46eec&#34;&gt;Scaling Event Sourcing for Netflix Downloads, Episode 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/netflix-scale-event-sourcing&#34;&gt;InfoQ | Scaling Event Sourcing for Netflix Downloads | Video + Presentation&lt;/a&gt; - shows in detail how they implemented event sourcing backed by cassandra&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/eaaDev/EventSourcing.html&#34;&gt;matrinfowler.com | Event Sourcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://microservices.io/patterns/data/event-sourcing.html&#34;&gt;Pattern: Event sourcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/serverless-transformation/eventbridge-storming-how-to-build-state-of-the-art-event-driven-serverless-architectures-e07270d4dee&#34;&gt;EventBridge Storming — How to build state-of-the-art Event-Driven Serverless Architectures&lt;/a&gt; - approach to defining the Events, Boundaries and Entities in your business domain&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/capital-one-tech/event-storming-decomposing-the-monolith-to-kick-start-your-microservice-architecture-acb8695a6e61&#34;&gt;Decomposing the Monolith with Event Storming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;hexagonal&#34;&gt;Hexagonal&lt;/h3&gt;
&lt;p&gt;the ports and adapters architecture.  decouples core domain logic from specific storage, database, protocol, etc.&lt;/p&gt;
&lt;h4 id=&#34;resources-1&#34;&gt;Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.octo.com/en/hexagonal-architecture-three-principles-and-an-implementation-example/&#34;&gt;Hexagonal Architecture: three principles and an implementation example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;topics--concepts--terms&#34;&gt;Topics / Concepts / Terms&lt;/h2&gt;
&lt;h3 id=&#34;database&#34;&gt;Database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CAP_theorem&#34;&gt;CAP theorem&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Consistency: Every read receives the most recent write or an error&lt;/li&gt;
&lt;li&gt;Availability: Every request receives a (non-error) response, without the guarantee that it contains the most recent write&lt;/li&gt;
&lt;li&gt;Partition tolerance: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serializability&#34;&gt;Serializability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Snapshot_isolation&#34;&gt;Snapshot isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Multiversion_concurrency_control&#34;&gt;Multiversion concurrency control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@rakyll/things-i-wished-more-developers-knew-about-databases-2d0178464f78&#34;&gt;Things I Wished More Developers Knew About Databases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shuffle-sharding&#34;&gt;Shuffle Sharding&lt;/h3&gt;
&lt;p&gt;limits / isolates tenants in a multi-tenant system so they don&amp;rsquo;t negatively impact other tenants.  method of assigning tenant to resources.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/builders-library/workload-isolation-using-shuffle-sharding/?did=ba_card&amp;amp;trk=ba_card&#34;&gt;Workload isolation using shuffle-sharding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constant-work&#34;&gt;Constant Work&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;overprovision resources to the point where it would operate correctly even if an availability zone were to be unavailable&lt;/li&gt;
&lt;li&gt;if AZ becomes unavailable, no new resources need to be provisioned, just a quick re-routing.  you are essentially always operating the infrastructure for failure mode (active-active)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/builders-library/static-stability-using-availability-zones&#34;&gt;Static stability using Availability Zones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;canary&#34;&gt;Canary&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A canary release is a technique to reduce the risk from deploying a new version of software into production. A new version of software, referred to as the canary, is deployed to a small subset of users alongside the stable running version. Traffic is split between these two versions such that a portion of incoming requests are diverted to the canary. This approach can quickly uncover any problems with the new version without impacting the majority of users.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/automated-canary-analysis-at-netflix-with-kayenta-3260bc7acc69&#34;&gt;Automated Canary Analysis at Netflix with Kayenta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;resources-2&#34;&gt;Resources&lt;/h2&gt;
&lt;h3 id=&#34;books-oreillycomhttpslearningoreillycom&#34;&gt;Books (&lt;a href=&#34;https://learning.oreilly.com&#34;&gt;&lt;em&gt;oreilly.com&lt;/em&gt;&lt;/a&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/fundamentals-of-software/9781492043447/&#34;&gt;Fundamentals of Software Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/clean-architecture-a/9780134494272/&#34;&gt;Clean Architecture: A Craftsman&amp;rsquo;s Guide to Software Structure and Design, First Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/software-architecture-patterns/9781491971437&#34;&gt;Software Architecture Patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/building-evolutionary-architectures/9781491986356/&#34;&gt;Building Evolutionary Architectures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/clean-architecture-a/9780134494272/&#34;&gt;Clean Architecture: A Craftsman&amp;rsquo;s Guide to Software Structure and Design, First Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/domain-driven-design-tackling/0321125215/&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/microservices-patterns/9781617294549/&#34;&gt;Microservices Patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/patterns-of-enterprise/0321127420/&#34;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/refactoring-improving-the/9780134757681/&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/design-patterns-elements/0201633612/&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/designing-distributed-systems/9781491983638&#34;&gt;Designing Distributed Systems&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Designing-Distributed-Control-Systems-Language/dp/1118694155/&#34;&gt;Designing Distributed Control Systems: A Pattern Language Approach (Wiley Software Patterns Series)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;websites&#34;&gt;Websites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/&#34;&gt;martinfowler.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/architecture&#34;&gt;AWS Architecture Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/architecture&#34;&gt;AWS Architecture Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/builders-library/?cards-body.sort-by=item.additionalFields.customSort&amp;amp;cards-body.sort-order=asc&#34;&gt;Amazon Builders&#39; Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/&#34;&gt;Azure Architecture Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/tag/software-architecture&#34;&gt;medium | articles tagged with &amp;ldquo;software architecture&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://c4model.com/&#34;&gt;C4 model for visualizing software architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
  </channel>
</rss>