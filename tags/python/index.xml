<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>python on Brian Pfeil</title>
        <link>https://brianpfeil.com/tags/python/</link>
        <description>Recent content in python on Brian Pfeil</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 19 Feb 2021 00:00:00 -0500</lastBuildDate><atom:link href="https://brianpfeil.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
<title>AWS Glue Pyspark Fetch Databases and Tables Metadata</title>
<link>https://brianpfeil.com/post/aws-glue-pyspark-fetch-databases-and-tables-metadata/</link>
<pubDate>Fri, 19 Feb 2021 00:00:00 -0500</pubDate>
      
      <guid>https://brianpfeil.com/post/aws-glue-pyspark-fetch-databases-and-tables-metadata/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/aws-glue-pyspark-fetch-databases-and-tables-metadata-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/aws-glue-pyspark-fetch-databases-and-tables-metadata-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;example AWS Glue pyspark job script that fetches all the catalog databases and tables metadata.&lt;/p&gt;
&lt;p&gt;see &lt;a href=&#34;main.py&#34;&gt;&lt;code&gt;main.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first method uses &lt;a href=&#34;https://spark.apache.org/sql/&#34;&gt;spark sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;second method uses &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/glue.html&#34;&gt;python boto3 Glue client&lt;/a&gt; to interact with &lt;a href=&#34;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api.html&#34;&gt;Glue API&lt;/a&gt; directly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;p&gt;ensure &lt;code&gt;--enable-glue-datacatalog&lt;/code&gt; is enabled for glue job to allow spark sql to access metadata catalog&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/AAG3O9zQGjhBQYiqT7_owkUm9K-UXd0bMCEB/image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Glue Console Script View&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/AAG2b5Bdis5KFbt6ijxtySgIG7e2P8jPE0UB/image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>AWS Data Wrangler</title>
<link>https://brianpfeil.com/post/aws-data-wrangler/</link>
<pubDate>Wed, 06 Jan 2021 00:00:00 -0500</pubDate>
      
      <guid>https://brianpfeil.com/post/aws-data-wrangler/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/aws-data-wrangler-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/aws-data-wrangler-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;learn &lt;a href=&#34;https://aws-data-wrangler.readthedocs.io&#34;&gt;AWS Data Wrangler&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python initiative that extends the power of Pandas library to AWS connecting DataFrames and AWS data related services (Amazon Redshift, AWS Glue, Amazon Athena, Amazon Timestream, Amazon EMR, Amazon QuickSight, etc).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;running-examples&#34;&gt;Running Examples&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# install venv and deps&lt;/span&gt;
pipenv install

&lt;span class=&#34;c1&#34;&gt;# activate venv&lt;/span&gt;
pipenv shell

&lt;span class=&#34;c1&#34;&gt;# run examples&lt;/span&gt;
python main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href=&#34;https://github.com/awslabs/aws-data-wrangler/tree/master/tutorials&#34;&gt;https://github.com/awslabs/aws-data-wrangler/tree/master/tutorials&lt;/a&gt; for example usages.&lt;/p&gt;
&lt;h2 id=&#34;lambda-layer&#34;&gt;Lambda Layer&lt;/h2&gt;
&lt;p&gt;Can be used via a &lt;a href=&#34;https://aws-data-wrangler.readthedocs.io/en/stable/install.html#aws-lambda-layer&#34;&gt;lambda layer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws-data-wrangler.readthedocs.io/&#34;&gt;https://aws-data-wrangler.readthedocs.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/aws-data-wrangler&#34;&gt;awslabs/aws-data-wrangler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws-data-wrangler.readthedocs.io/en/stable/api.html&#34;&gt;AWS Data Wrangler| API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/aws-data-wrangler/tree/master/tutorials&#34;&gt;https://github.com/awslabs/aws-data-wrangler/tree/master/tutorials&lt;/a&gt; - notebooks with examples&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Python</title>
<link>https://brianpfeil.com/post/python/</link>
<pubDate>Fri, 20 Nov 2020 00:00:00 -0500</pubDate>
      
      <guid>https://brianpfeil.com/post/python/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/python-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/python-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;learn and experiment with python, it&amp;rsquo;s libraries, and packages&lt;/p&gt;
&lt;p&gt;add &lt;code&gt;test_*.py&lt;/code&gt; file to &lt;a href=&#34;tests/unit&#34;&gt;tests/unit&lt;/a&gt; directory with code to test, learn, experiment with language, library, package, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# clone and cd into this repo&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# activate venv&lt;/span&gt;
pipenv shell

&lt;span class=&#34;c1&#34;&gt;# install deps (e.g. nodemon)&lt;/span&gt;
npm install

&lt;span class=&#34;c1&#34;&gt;# run tests&lt;/span&gt;
npm run &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# run tests and watch for changes to re-run&lt;/span&gt;
npm run test:watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>
    
    <item>
<title>Serverless Flask</title>
<link>https://brianpfeil.com/post/serverless-flask/</link>
<pubDate>Fri, 13 Nov 2020 00:00:00 -0500</pubDate>
      
      <guid>https://brianpfeil.com/post/serverless-flask/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/serverless-flask-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/serverless-flask-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Example of running python &lt;a href=&#34;https://flask.palletsprojects.com/&#34;&gt;Flask&lt;/a&gt; app on Lambda + API Gateway via &lt;a href=&#34;https://www.serverless.com/&#34;&gt;serverless framework&lt;/a&gt;.  Based on &lt;a href=&#34;https://www.serverless.com/blog/flask-python-rest-api-serverless-lambda-dynamodb&#34;&gt;Build a Python REST API with Serverless, Lambda, and DynamoDB&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;architecture&#34;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://s3-us-west-2.amazonaws.com/assets.site.serverless.com/guides/serverless-flask/serverless-flask-architecture.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.serverless.com/&#34;&gt;serverless framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 3.8&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pypa/pipenv&#34;&gt;pipenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ensure python venv loaded in shell&lt;/span&gt;
pipenv shell

&lt;span class=&#34;c1&#34;&gt;# install npm deps for serverless&lt;/span&gt;
npm install

&lt;span class=&#34;c1&#34;&gt;# run flash app locally.  server reloads on file change.  still need to refresh page in browser&lt;/span&gt;
npm run dev

&lt;span class=&#34;c1&#34;&gt;# deploy. (docker must be running to build python packages for linux target / lambda)&lt;/span&gt;
npm run deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.serverless.com/flask&#34;&gt;The Official Guide to Serverless Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.serverless.com/blog/flask-python-rest-api-serverless-lambda-dynamodb&#34;&gt;Build a Python REST API with Serverless, Lambda, and DynamoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Boto3</title>
<link>https://brianpfeil.com/post/boto3/</link>
<pubDate>Mon, 05 Oct 2020 00:00:00 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/boto3/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/boto3-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/boto3-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;learn &lt;a href=&#34;https://github.com/boto/boto3&#34;&gt;boto3&lt;/a&gt;, the Amazon Web Services (AWS) SDK for Python&lt;/p&gt;
&lt;h2 id=&#34;concepts&#34;&gt;Concepts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Clients&lt;/strong&gt; provide a low-level interface to AWS whose methods map close to 1:1 with service APIs. All service operations are supported by clients. Clients are generated from a JSON service definition file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt; represent an object-oriented interface to Amazon Web Services (AWS). They provide a higher-level abstraction than the raw, low-level calls made by service clients. To use resources, you invoke the resource() method of a Session and pass in a service name:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session&lt;/strong&gt; manages state about a particular configuration. By default, a session is created for you when needed. However, it&amp;rsquo;s possible and recommended that in some scenarios you maintain your own session. Sessions typically store the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Credentials&lt;/li&gt;
&lt;li&gt;AWS Region&lt;/li&gt;
&lt;li&gt;Other configurations related to your profile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Collection&lt;/strong&gt; provides an iterable interface to a group of resources. A collection seamlessly handles pagination for you, making it possible to easily iterate over all items from all pages of data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paginators&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some AWS operations return results that are incomplete and require subsequent requests in order to attain the entire result set. The process of sending subsequent requests to continue where a previous request left off is called pagination.  Paginators are a feature of boto3 that act as an abstraction over the process of iterating over an entire result set of a truncated API operation.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;developing&#34;&gt;Developing&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# install virtual env and dependencies&lt;/span&gt;
pipenv install

&lt;span class=&#34;c1&#34;&gt;# (optional) install additional pip package&lt;/span&gt;
pipenv install &amp;lt;package&amp;gt;

&lt;span class=&#34;c1&#34;&gt;# activate python virtual env (optional)&lt;/span&gt;
pipenv shell

&lt;span class=&#34;c1&#34;&gt;# run on change&lt;/span&gt;
make dev

&lt;span class=&#34;c1&#34;&gt;# --- running via jupyter notebook ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# in vscode&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# click on `main.ipynb`.  this will automatically start jupyter notebook and connect&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# ctrl+enter to run cell&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# ctrl+space for intellisense&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# see [How to use Pipenv with Jupyter and VSCode](https://towardsdatascience.com/how-to-use-pipenv-with-jupyter-and-vscode-ae0e970df486)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# manually run jupyter notebook&lt;/span&gt;
pipenv run jupyter notebook

&lt;span class=&#34;c1&#34;&gt;# access via browser manually (auto opens via above command)&lt;/span&gt;
open http://localhost:8888/tree

&lt;span class=&#34;c1&#34;&gt;# convert notebook to python.  generates `main_notebook.py`&lt;/span&gt;
jupyter nbconvert --to script main.ipynb --output main_notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;p&gt;for vscode, install &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance&#34;&gt;Pylance - Visual Studio Marketplace&lt;/a&gt; extension&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boto3.readthedocs.io/&#34;&gt;Boto3 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boto/boto3&#34;&gt;boto/boto3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.org/project/boto3-stubs/&#34;&gt;boto3-stubs&lt;/a&gt; - for code completion&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/python/jupyter-support&#34;&gt;Working with Jupyter Notebooks in Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/how-to-use-pipenv-with-jupyter-and-vscode-ae0e970df486&#34;&gt;How to use Pipenv with Jupyter and VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/vscode-jupyter-notebooks-are-getting-an-upgrade-cc9aaaefc744&#34;&gt;Big Upgrades are coming to VSCode Jupyter Notebooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Python Async Await</title>
<link>https://brianpfeil.com/post/python-async-await/</link>
<pubDate>Wed, 05 Feb 2020 00:00:00 -0500</pubDate>
      
      <guid>https://brianpfeil.com/post/python-async-await/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/python-async-await-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/python-async-await-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;learn &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html&#34;&gt;python async await&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pipenv.kennethreitz.org/&#34;&gt;Pipenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;git clone&lt;/li&gt;
&lt;li&gt;pipenv install&lt;/li&gt;
&lt;li&gt;pipenv run python main.py&lt;/li&gt;
&lt;/ol&gt;
</description>
</item>
    
    <item>
<title>Pipenv</title>
<link>https://brianpfeil.com/post/pipenv/</link>
<pubDate>Wed, 07 Aug 2019 00:00:00 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/pipenv/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/pipenv-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/pipenv-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;learn &lt;a href=&#34;https://github.com/pypa/pipenv&#34;&gt;pipenv&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages. It also generates the ever-important Pipfile.lock, which is used to produce deterministic builds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;based on &lt;a href=&#34;https://docs.python-guide.org/dev/virtualenvs/&#34;&gt;https://docs.python-guide.org/dev/virtualenvs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# install&lt;/span&gt;
pip3 install pipenv

&lt;span class=&#34;c1&#34;&gt;# create directory&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/tmp
mkdir pipenv-playground
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; pipenv-playground

&lt;span class=&#34;c1&#34;&gt;# install dependency&lt;/span&gt;
pipenv install requests

&lt;span class=&#34;c1&#34;&gt;# write some code that uses the dependency&lt;/span&gt;
touch main.py

&lt;span class=&#34;c1&#34;&gt;# run it using the created virtualenv&lt;/span&gt;
pipenv run python main.py

&lt;span class=&#34;c1&#34;&gt;# can also specify `python3` explicitly&lt;/span&gt;
pipenv run python3 main.py

&lt;span class=&#34;c1&#34;&gt;# try with jupyter notebook&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
mkdir jupyter-notebook-playground
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; jupyter-notebook-playground
pipenv install jupyter
pipenv run jupyter notebook

&lt;span class=&#34;c1&#34;&gt;# try with jupyterlab&lt;/span&gt;
pipenv install jupyterlab
pipenv run jupyter lab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>
    
    <item>
<title>Python Packaging</title>
<link>https://brianpfeil.com/post/python-packaging/</link>
<pubDate>Wed, 07 Aug 2019 00:00:00 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/python-packaging/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/python-packaging-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/python-packaging-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;learn python packaging via &lt;a href=&#34;https://packaging.python.org/tutorials/packaging-projects/&#34;&gt;Packaging Python Projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;view example package at &lt;a href=&#34;https://test.pypi.org/project/example-pkg-pfeilbr/&#34;&gt;https://test.pypi.org/project/example-pkg-pfeilbr/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;
python3 -m venv .venv
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .venv/bin/activate
mkdir example-pkg-pfeilbr
touch example-pkg-pfeilbr/__init__.py
python3 -m pip install --user --upgrade setuptools wheel
python3 setup.py sdist bdist_wheel
pip install --upgrade pip
pip install wheel
pip install twine
python3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*

&lt;span class=&#34;c1&#34;&gt;# testing&lt;/span&gt;
mkdir tmp
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; tmp
python3 -m venv .venv
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .venv/bin/activate
pip list
python3 -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-pfeilbr

&lt;span class=&#34;c1&#34;&gt;# to install specific version.  did this because it was using 0.0.1 from a cache&lt;/span&gt;
python3 -m pip install --index-url https://test.pypi.org/simple/ --no-deps &lt;span class=&#34;s1&#34;&gt;&amp;#39;example-pkg-pfeilbr==0.0.2&amp;#39;&lt;/span&gt;

pip list

&lt;span class=&#34;c1&#34;&gt;# test using package&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;import example_pkg_pfeilbr\nprint(example_pkg_pfeilbr.name)&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/AAFV5Z92tLtH4bxLDZj52Ok7WpUvaabNZ4kB/image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/AAGOtALBRBRHtZgMsWnV1JArEJRyT9SjZQ4B/image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;example-package&#34;&gt;Example Package&lt;/h1&gt;
&lt;p&gt;This is a simple example package. You can use
&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;Github-flavored Markdown&lt;/a&gt;
to write your content.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Python 2.X WebSocket Client</title>
<link>https://brianpfeil.com/post/python-2.x-websocket-client/</link>
<pubDate>Fri, 10 May 2019 00:00:00 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/python-2.x-websocket-client/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/python-2.x-websocket-client-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/python-2.x-websocket-client-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;learn python &lt;a href=&#34;https://github.com/websocket-client/websocket-client&#34;&gt;websocket-client&lt;/a&gt; module&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;python 2.x&lt;/li&gt;
&lt;li&gt;node.js: for local websocket server. code is from &lt;a href=&#34;https://glitch.com/~socketio-basic&#34;&gt;https://glitch.com/~socketio-basic&lt;/a&gt;.  uses &lt;a href=&#34;https://github.com/websockets/ws&#34;&gt;ws: a Node.js WebSocket library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;virtualenv: &lt;code&gt;pip install virtualenv&lt;/code&gt; or &lt;code&gt;sudo pip install virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;running&#34;&gt;running&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# server (node.js) - run in own terminal (blocking)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; src/server
npm i
npm start

&lt;span class=&#34;c1&#34;&gt;# client - run in separate terminal&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; src/client
virtualenv venv
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; venv/bin/activate
pip install -r requirements.txt
python client.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;example run&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/AAFaIvf7mthMmJO0Q4o62USTYJES2wvIXCsB/image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Imagenet</title>
<link>https://brianpfeil.com/post/imagenet/</link>
<pubDate>Wed, 31 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>https://brianpfeil.com/post/imagenet/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/imagenet-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/imagenet-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;project to explore &lt;a href=&#34;http://www.image-net.org/&#34;&gt;ImageNet&lt;/a&gt; image data for ML applications&lt;/p&gt;
&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;
&lt;p&gt;run jupyter notebook via &lt;code&gt;kjupyter&lt;/code&gt; command&lt;/p&gt;
&lt;p&gt;see &lt;a href=&#34;&#34;&gt;imagenet-classify.ipynb&lt;/a&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>OpenCV Python</title>
<link>https://brianpfeil.com/post/opencv-python/</link>
<pubDate>Wed, 31 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>https://brianpfeil.com/post/opencv-python/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/opencv-python-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/opencv-python-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;code is split between jupyter notebook(s) and python (.py) files&lt;/p&gt;
&lt;h2 id=&#34;to-create-virtualenv-only-required-for-first-time-setup&#34;&gt;to create virtualenv (only required for first time setup)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python3 -m venv .env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;activate virtualenv&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .env/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;display webcam video&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python opencv-webcam.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;example run screenshot
&lt;img src=&#34;https://www.evernote.com/l/AAEIScL_DhlHx7ZaJPGL_aa5di-WK_tHsKMB/image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Serverless Python</title>
<link>https://brianpfeil.com/post/serverless-python/</link>
<pubDate>Fri, 10 Nov 2017 00:00:00 -0500</pubDate>
      
      <guid>https://brianpfeil.com/post/serverless-python/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/serverless-python-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/serverless-python-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;experiment with the &lt;a href=&#34;https://serverless.com/framework/&#34;&gt;serverless framework&lt;/a&gt; using python&lt;/p&gt;
&lt;p&gt;based on &lt;a href=&#34;https://serverless.com/blog/serverless-python-packaging/&#34;&gt;https://serverless.com/blog/serverless-python-packaging/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;session&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# install `serverless framework` if not already installed&lt;/span&gt;
npm install serverless -g

&lt;span class=&#34;c1&#34;&gt;# create serverless python project&lt;/span&gt;
serverless create --template aws-python3  --name numpy-test --path numpy-test

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; numpy-test

&lt;span class=&#34;c1&#34;&gt;# create isolated virtualenv&lt;/span&gt;
virtualenv venv --python&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;python3
touch handler.py
code .
&lt;span class=&#34;c1&#34;&gt;# add code for `handler.py`&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# activate virtualenv&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; venv/bin/activate

&lt;span class=&#34;c1&#34;&gt;# run to test&lt;/span&gt;
python handler.py

pip install numpy

&lt;span class=&#34;c1&#34;&gt;# save dependencies&lt;/span&gt;
pip freeze &amp;gt; requirements.txt
cat requirements.txt

&lt;span class=&#34;c1&#34;&gt;# install dependencies (don&amp;#39;t need to execute if starting from scratch)&lt;/span&gt;
pip install -r requirements.txt

python handler.py
npm init --force

&lt;span class=&#34;c1&#34;&gt;# add serverless `serverless-python-requirements` plugin&lt;/span&gt;
npm install --save serverless-python-requirements

&lt;span class=&#34;c1&#34;&gt;# deploy&lt;/span&gt;
sls deploy

&lt;span class=&#34;c1&#34;&gt;# invoke lambda and output log&lt;/span&gt;
sls invoke -f numpy --log

&lt;span class=&#34;c1&#34;&gt;# cleanup&lt;/span&gt;
sls remove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>
    
    <item>
<title>Deep and Machine Learning</title>
<link>https://brianpfeil.com/post/deep-and-machine-learning/</link>
<pubDate>Sun, 24 Sep 2017 00:00:00 -0400</pubDate>
      
      <guid>https://brianpfeil.com/post/deep-and-machine-learning/</guid>
<description>&lt;div class=&#34;alert alert-info small bg-info&#34; role=&#34;alert&#34;&gt;
&lt;span class=&#34;text-muted&#34;&gt;code for article&lt;/span&gt;&amp;nbsp;&lt;a href=&#34;https://github.com/pfeilbr/deep-and-machine-learning-playground&#34; target=&#34;_blank&#34;&gt;&lt;i class=&#34;fab fa-github fa-sm&#34;&gt;&lt;/i&gt;&amp;nbsp;pfeilbr/deep-and-machine-learning-playground&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;docker image + jupyter notebook UI for learning and experimenting with deep and machine learning.&lt;/p&gt;
&lt;p&gt;docker image based on &lt;a href=&#34;https://github.com/floydhub/dl-docker&#34;&gt;https://github.com/floydhub/dl-docker&lt;/a&gt; - All-in-one Docker image for Deep Learning&lt;/p&gt;
&lt;p&gt;docker hub image @ &lt;a href=&#34;https://hub.docker.com/r/pfeilbr/deep-and-machine-learning/&#34;&gt;https://hub.docker.com/r/pfeilbr/deep-and-machine-learning/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -it -p 8888:8888 -p 6006:6006 -v /Users/brianpfeil/projects/deep-and-machine-learning-playground:/root/sharedfolder pfeilbr/deep-and-machine-learning:v2 bash

&lt;span class=&#34;c1&#34;&gt;# this lands you at a bash prompt in the container&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# start jupyter&lt;/span&gt;
jupyter notebook

&lt;span class=&#34;c1&#34;&gt;# open browser to http://localhost:8888/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;to-save-container-changes&#34;&gt;To save container changes&lt;/h2&gt;
&lt;p&gt;for example to save software installs (e.g. apache mxnet was added to image)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# list images to find commit id&lt;/span&gt;
docker ps -a

&lt;span class=&#34;c1&#34;&gt;# commit changes&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# docker commit 5b4a6fb7117b pfeilbr/deep-and-machine-learning:TAG&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# e.g. &lt;/span&gt;
docker commit 5b4a6fb7117b pfeilbr/deep-and-machine-learning:v2

&lt;span class=&#34;c1&#34;&gt;# push new image to docker hub&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# docker push pfeilbr/deep-and-machine-learning:TAG&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# e.g.&lt;/span&gt;
docker push pfeilbr/deep-and-machine-learning:v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
</item>
    
  </channel>
</rss>